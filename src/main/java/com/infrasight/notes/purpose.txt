1. Introduction

1.1 Purpose & Scope

The Gamification Layer in InfraSight is designed to increase end-user engagement, promote consistent usage, and reward productive behavior by integrating a unified points and badges system directly into the existing InfraSight application. By tracking meaningful engineer activities—such as daily logins, command executions, and interaction with production environments—in a transparent, time-zone-aware way, we aim to:

Encourage daily adoption of the InfraSight platform through daily login rewards and streak multipliers.

Drive best practices by assigning differentiated points based on command complexity, environment tier, and number of servers touched.

Recognize and celebrate high-value contributions via badges (e.g., Server Centurion), leaderboards, and bonus awards for long hiatus returns.

Provide a flexible, configurable framework that can be extended or tuned by administrators without code changes, via a single source of truth in the properties collection.


Scope:

Data capture of user events (login, read-only command executions) including parameters, server lists, and environment context.

Points calculation engine, applying base scores, complexity weights, server scaling, streak multipliers, and welcome-back bonuses.

Time-zone–aware logic so that daily boundaries align with each user’s local midnight rather than the server’s UTC clock.

Persistent storage in MongoDB for:
• Aggregated user totals (user_gamify)
• Detailed audit log of every point transaction (points_log)
• Centralized configuration document (properties → gamification)

RESTful API surface (and optional composite endpoint) for awarding points, querying user stats, leaderboards, and badge catalogs.

Nightly batch processor which can optionally defer all point calculations to off-peak hours via the NightlyGamifyJob.


This document will walk through the architecture, data models, service implementations, and API contracts needed to deliver these capabilities in a maintainable, testable, and extensible way.

1.2 Glossary of Terms

Daily Login: The action of authenticating into InfraSight, eligible for daily points.

Streak Days: Consecutive days a user has logged in on their local calendar day boundary.

Points Delta: The number of points awarded for a single event (login or command).

Total Points: Aggregate point balance stored in the user_gamify document.

Badge: A named reward triggered by meeting certain conditions (e.g. server_centurion).

LeaderboardEntry: A DTO representing a user’s rank, total points, and badge count.

GamifyConfigDoc: The MongoDB document storing all weights and scoring rules under _id: "default".

PropertiesDoc: The MongoDB document (e.g. _id: "global") that may contain a nested gamification section if used.

Cron Expression: A schedule syntax 0 5 0 * * * representing a daily run at 00:05 UTC.

IANA Time-Zone: A string like Asia/Kolkata or America/New_York used to localize dates.


2. Data Models

2.1 UserGamify Document

Stores each user’s aggregated gamification state.

@Document(collection = "user_gamify")
public class UserGamify {
    @Id private String userId;
    private String name;
    private String department;
    private int totalPoints;
    private int streakDays;
    private Instant lastLoginUtc;
    private String timeZoneId;
    private Set<String> uniqueServers;
    private int totalCommands;
    private int prodCommands;
    private List<String> badges;
}

userId: unique user identifier.

totalPoints: current point balance.

streakDays: number of consecutive daily logins in user’s local zone.

lastLoginUtc & timeZoneId: for time-zone–aware daily checks.

uniqueServers, totalCommands, prodCommands, badges: counters & awards.


2.2 PointsLog Document

Audit trail of every points transaction.

@Document(collection = "points_log")
public class PointsLog {
    @Id private String id;
    private String userId;
    private String event;
    private String environment;
    private List<String> servers;
    private int pointsDelta;
    private int totalPoints;
    private int streakDays;
    private LocalDateTime timestamp;
    private List<String> newBadges;
}

Each row records one event’s pointsDelta, post-credit totalPoints, streakDays, and any newBadges.


2.3 RequestModel Document (Existing)

Source data representing a command execution request.

@Document(collection = "requests")
public class RequestModel {
    @Id private String requestId;
    private String userId;
    private String event;
    private String environment;
    private List<String> serverList;
    private List<String> parameters;
    private Instant finishedTimestamp;
}

Used by the nightly batch to compute command-based points.


2.4 GamifyConfigDoc Document

Container for all scoring rules and weights.

@Document(collection = "properties")
public class PropertiesDoc {
    @Id private String id;           // "global"
    private GamifyConfig gamification;
    public static class GamifyConfig {
        private int baseScore;
        private int loginPoints;
        private int welcomeBackBonus;
        private int welcomeBackGap;
        private Map<String,Double> commandWeight;
        private Map<String,Double> parameterWeight;
        private Map<String,Double> accessTierWeight;
        private ServerScaling serverScaling;
        private Map<Integer,Double> streakMultiplier;
        private Map<String,BadgeDef> badges;
    }
}

commandWeight, parameterWeight, accessTierWeight: maps of weights.

serverScaling: scaling formula (log base N).

streakMultiplier, badges: streak rewards & badge definitions.



