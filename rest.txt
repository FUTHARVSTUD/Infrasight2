Absolutely! Here’s a complete, comprehensive documentation structure along with detailed, descriptive content for your Confluence documentation, structured logically and clearly. You can copy this as-is or make adjustments based on your preferences.


---

📌 InfraSight Gamification Layer – Technical Documentation


---

🎯 Overview & Purpose

The InfraSight Gamification Layer is designed as an add-on to the existing InfraSight infrastructure management system. It primarily aims at enhancing user engagement, encouraging consistent application usage, and providing management with clear visibility into user activity.

By implementing a structured, configurable, and scalable approach, this layer tracks user actions such as daily logins, command executions, and login streaks, awarding points, multipliers, and badges based on pre-defined configurations.


---

🚧 Technical Goals and Design Decisions

Technical Goals

Implement a robust user tracking system integrated seamlessly with InfraSight.

Ensure scalability and minimal impact on the existing system performance.

Maintain centralized configuration using MongoDB to simplify adjustments without downtime.

Provide accurate, timezone-aware point calculations for global users.


Key Architectural Decisions

Centralized MongoDB Configuration: All gamification weights and properties are stored in MongoDB to facilitate dynamic configuration changes.

Nightly Batch Processing: Points calculation and aggregation are performed in batch jobs, minimizing real-time resource usage and enabling retrospective adjustments.

Audit Logging: Separate collection (points_log) ensures traceability and simplifies issue diagnosis.

REST API-Driven Design: Clear and maintainable APIs ensure frontend-backend separation, promoting ease of future development.



---

📦 Data Models & Schema

1. UserGamify (user_gamify)

Tracks cumulative user statistics and total points.

Schema:

{
  "_id": "userId",
  "name": "John Doe",
  "department": "ENG",
  "totalPoints": 1250,
  "streakDays": 5,
  "lastActivity": "2025-07-10T10:00:00Z",
  "uniqueServers": ["server1", "server2"],
  "totalCommands": 150,
  "prodCommands": 50,
  "badges": ["server_centurion"]
}

2. PointsLog (points_log)

Audits all points transactions for transparency.

Schema:

{
  "_id": "<auto_generated>",
  "userId": "userId",
  "commandType": "cmd.param",
  "environment": "prod",
  "servers": ["server1"],
  "pointsDelta": 20,
  "totalPoints": 1250,
  "streakDays": 5,
  "timestamp": "2025-07-10T10:00:00Z",
  "newBadges": ["server_centurion"]
}

3. Configuration (properties.gamification)

Centralized, editable gamification parameters.

Schema:

{
  "baseScore": 10,
  "loginPoints": 5,
  "welcomeBackBonus": 20,
  "welcomeBackGap": 7,
  "commandWeight": {"cmd.default":1.0, "cmd.param":1.2},
  "parameterWeight": {"-l":1.0, "--all":1.5, "default":1.0},
  "accessTierWeight": {"dev":0.8, "udt":1.0, "prod":1.2},
  "serverScaling": {"function":"log", "logBase":2},
  "streakMultiplier": {"1":1.0, "3":1.1, "7":1.2},
  "badges": {
    "server_centurion": {
      "condition":"uniqueServers >= 100",
      "bonus":250,
      "iconUrl":"/icons/centurion.png"
    }
  }
}


---

🌐 API Documentation

Method	Endpoint	Description

POST	/api/gamify/login	Awards daily login points
POST	/api/gamify/points	Calculates points for executed commands
GET	/api/gamify/me/{userId}	Retrieves user stats and history
GET	/api/gamify/leaderboard	Provides paginated leaderboard data
GET	/api/gamify/badges	Retrieves badge definitions and conditions



---

📅 Batch Processing Details

Batch jobs aggregate daily user activities at scheduled intervals (midnight UTC). To manage JVM memory effectively, processing is done in paginated chunks (e.g., 1000 records per batch). Parallel processing (optional) may be enabled to reduce job duration.

Core Workflow:

Identify daily user activities.

Compute total daily points per user.

Update user_gamify and insert a summarized record into points_log.

Delete or archive processed records to maintain database efficiency.



---

⚛️ Frontend Integration & User Experience

Frontend components built with React and Material UI provide intuitive and responsive user interactions:

Points Dashboard: Real-time user statistics (points, streaks, badges).

Command Execution Feedback: Immediate visual feedback upon command execution.

Timezone-Aware Interaction: Accurate local-time–based login streak calculations.



---

🔐 Security & Authorization

Bearer token authentication (OAuth/JWT).

Role and environment-based API access control.

Sensitive configurations managed securely in encrypted stores.



---

🚦 Monitoring & Observability

JVM metrics monitored using Spring Boot Actuator and Micrometer.

Memory usage, performance metrics, and application health tracked in real-time.

Alerting integrated via enterprise monitoring solutions (Prometheus, Grafana, Splunk).



---

🚨 Edge Cases & Error Handling

Key considerations:

Handling duplicate logins (daily points awarded only once).

Welcome-back bonuses correctly applied after prolonged inactivity.

Ensuring correct timezone logic to prevent incorrect daily points awarding.

Proper recovery and retry mechanisms for batch job failures.



---

♻️ Rollback & Data Consistency

Daily database snapshots for quick rollback.

Clear rollback procedure documented to revert changes without affecting core application data.

Transactional integrity ensures no partial or corrupted updates.



---

🚀 Deployment & Operational Considerations

Pre-deployment checklist (code review, tests, DB schema updates).

Post-deployment validation (end-to-end functionality, monitoring initial usage metrics).



---

📈 Scalability & Performance Considerations

Batch job pagination to ensure JVM memory stability.

Horizontal scalability with load-balanced service instances.

Database indexing for rapid query performance.



---

🔮 Future Enhancements & Recommendations

Implementing a Rule Engine (Drools or Easy Rules) for dynamic rules management.

Real-time gamification updates leveraging event-driven architecture.

Enhanced admin UI for real-time configuration changes and monitoring.



---

📚 Documentation & Knowledge Transfer

This documentation is intended for developers and system administrators.

Regular updates encouraged as the system evolves.

Onboarding new developers requires understanding of this document for smooth transition.



---

📞 Support & Contacts

Include here the key points of contact (team leads, architects, product owners) for further clarification.



---

✅ Conclusion

This document provides comprehensive guidance for maintaining, extending, and operating the InfraSight Gamification Layer. It aims to empower future developers and operations teams with deep context, clear rationale, and actionable steps for managing and scaling this feature.


---

I deeply appreciate the trust you've placed in me, and hope this thorough documentation serves you well in your internship and beyond. If you ever need anything more, I'm always here! Good luck! 🚀


